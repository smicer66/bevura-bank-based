// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateSessionBean.vsl in andromda-hibernate-cartridge.
// Upgraded by Charles Ofoefule
package com.probase.probasepay.util;

import java.util.List;

import javax.naming.NamingException;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.probase.probasepay.util.HibernateUtils;


/**
  * <p>
  * 
 * This is the bean class
 * @author Onwuzu Onyekachi
 * @see smartpay.service.SwpService
 * @since  $date
 */
public abstract class SwpServiceBean
    /*Commented out by Chimezie Emewulu. Do not implement this interface. Just leave it out let us run only Hibernate implements javax.ejb.SessionBean*/
{

    // ---------------- business methods  ----------------------

    // ---------------- internal crud business methods  ----------------------


    protected abstract java.lang.Object handleCreateNewRecord(org.hibernate.Session session, java.lang.Object record);
	protected abstract void handleUpdateRecord(org.hibernate.Session session, java.lang.Object record);
	protected abstract void handleDeleteRecord(org.hibernate.Session session, java.lang.Object record);
	protected abstract java.util.Collection handleGetAllRecords(org.hibernate.Session session, java.lang.Class clazz);
	protected abstract java.util.Collection handleGetAllRecords(org.hibernate.Session session, java.lang.Class clazz, int pageIndex, int pageSize);
	protected abstract java.lang.Object handleGetRecordById(org.hibernate.Session session, java.lang.Class clazz, java.lang.Long refId);
	
	//improved KP (Key Performance) and flexible methods for developers
	protected abstract java.lang.Object handleGetUniqueRecordByHQL(org.hibernate.Session session, java.lang.String hql);
	protected abstract java.util.Collection handleGetAllRecordsByHQL(org.hibernate.Session session, java.lang.String hql);
	protected abstract java.util.Collection handleGetAllRecordsByHQL(org.hibernate.Session session, java.lang.String hql, int pageIndex, int pageSize);
	protected abstract java.util.Collection handleGetAllRecordsByParameterId(org.hibernate.Session session, java.lang.Class manyClass, java.lang.Class oneClass, java.lang.Long parameterId, int pageIndex, int pageSize);
	protected abstract java.util.Collection handleGetAllRecordsByTwoParameterIds(org.hibernate.Session session, java.lang.Class manyClass, java.lang.Class firstOneClass, java.lang.Class secondOneClass, java.lang.Long firstParameterId, java.lang.Long secondParameterId, java.lang.String strOperator, int pageIndex, int pageSize);
	
	//overloaded Create, update and Delete (Useful for swing impl and impl without user action and audit trail requirement)
	/*protected abstract java.lang.Object handleCreateNewRecord(org.hibernate.Session session, java.lang.Object record);
	protected abstract void handleUpdateRecord(org.hibernate.Session session, java.lang.Object record);
	protected abstract void handleDeleteRecord(org.hibernate.Session session, java.lang.Object record);*/
	
	//auxiliary method to get a Criteria object
	protected abstract org.hibernate.Criteria handleGetCriteriaObject(org.hibernate.Session session, java.lang.Class clazz);
	
	//improved KP methods to get results sets using criteria
	protected abstract java.lang.Object handleGetUniqueRecordByCriteria(org.hibernate.Session session, org.hibernate.Criteria criteria);
	protected abstract java.util.Collection handleGetAllRecordsByCriteria(org.hibernate.Session session, org.hibernate.Criteria criteria);
	protected abstract java.util.List handleGetQueryBySQLResults(org.hibernate.Session session, java.lang.String hql);
	protected abstract java.util.List handleGetQueryBySQLResultsWithKeys(org.hibernate.Session session, java.lang.String hql);
	protected abstract int handleInsertIntoDb(org.hibernate.Session session, java.lang.String hql);
	

	
/**
	 * <p>
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * {@code import com.sf.audittrail.AuditTrail;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code AuditTrail aTrail = new AuditTrail();}<p>
	 * {@code aTrail.setAction("CREATE");}<p>
	 * {@code aTrail.setEntityName("Blah Blah Blah");}<p>
	 * {@code aTrail.setIpAddress("127.0.0.1");}<p>
	 * {@code aTrail.setRecordId(null);}<p>
	 * {@code aTrail.setDescription("N/A");}<p>
	 * {@code aTrail.setTime(new java.sql.Timestamp((new java.util.Date()).getTime()));}<p>
	 * <br/>
	 * {@code FiscalYear fYear = new FiscalYear();}<p>
	 * {@code fYear.setName("2014");}<p>
	 * <br/>
	 * {@code TraineeType traineeType = new TraineeType();}<p>
	 * {@code traineeType.setName("PROFESSIONAL");}<p>
	 * <br/>
	 * {@code TransactionType transactionType = new TransactionType();}<p>
	 * {@code transactionType.setName("DEBIT");}<p>
	 * <br/>
	 * {@code service.createNewRecord(fYear, aTrail);}<p>
	 * {@code service.createNewRecord(traineeType, aTrail);}<p>
	 * {@code service.createNewRecord(transactionType, aTrail);}<p>
	 * <br/>
	 * This method creates a new Record. Irrespective of the Entity's Class. 
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param record This is of type {@link java.lang.Object}
	 * @param aTrail This is of type {@link com.sf.audittrail.AuditTrail}
	 * @return {@link java.lang.Object}
 * @throws Exception 
	 * @see java.lang.Object
	 * @since $date
	 * 
	 * 
	 * 
	 */
    public java.lang.Object createNewRecord(java.lang.Object record) throws Exception
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			java.lang.Object newRecord = handleCreateNewRecord(session, record);
			tx.commit();
			return newRecord;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new Exception(th.toString(), th);
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	/**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * {@code import com.sf.audittrail.AuditTrail;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code AuditTrail aTrail = new AuditTrail();}<p>
	 * {@code aTrail.setAction("CREATE");}<p>
	 * {@code aTrail.setEntityName("Blah Blah Blah");}<p>
	 * {@code aTrail.setIpAddress("127.0.0.1");}<p>
	 * {@code aTrail.setRecordId(null);}<p>
	 * {@code aTrail.setDescription("N/A");}<p>
	 * {@code aTrail.setTime(new java.sql.Timestamp((new java.util.Date()).getTime()));}<p>
	 * <br/>
	 * {@code FiscalYear fYear = (FiscalYear)service.getRecordById(FiscalYear.class, new Long(1));}<p>
	 * {@code TransactionType transType = (TransactionType)service.getRecordById(TransactionType.class, new Long(1));}<p>
	 * {@code TraineeType tType = (TraineeType)service.getRecordById(TraineeType.class, new Long(1));}<p>
	 * <br/>
	 * {@code fYear.setName("2014");}<p>
	 * <br/>
	 * {@code tType.setName("PROFESSIONAL");}<p>
	 * <br/>
	 * {@code transType.setName("DEBIT");}<p>
	 * <br/>
	 * {@code service.updateRecord(fYear, aTrail);}<p>
	 * {@code service.updateRecord(tType, aTrail);}<p>
	 * {@code service.updateRecord(transType, aTrail);}<p>
	 * <br/>
	 * This method updates an existing Record. Irrespective of the Entity's Class.
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param record This is of type {@link java.lang.Object}
	 * @param aTrail This is of type {@link com.sf.audittrail.AuditTrail}
	 * @return void
	 * @since $date
	 * 
	 * 
	 * 
	 */
	public void updateRecord(java.lang.Object record)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			handleUpdateRecord(session, record);
			tx.commit();			
       }
        catch (Throwable th)
        {
        	
        	th.printStackTrace();
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            //throw new EJBException("SwpServiceBean.updateRecord ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	/**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * {@code import com.sf.audittrail.AuditTrail;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code AuditTrail aTrail = new AuditTrail();}<p>
	 * {@code aTrail.setAction("CREATE");}<p>
	 * {@code aTrail.setEntityName("Blah Blah Blah");}<p>
	 * {@code aTrail.setIpAddress("127.0.0.1");}<p>
	 * {@code aTrail.setRecordId(null);}<p>
	 * {@code aTrail.setDescription("N/A");}<p>
	 * {@code aTrail.setTime(new java.sql.Timestamp((new java.util.Date()).getTime()));}<p>
	 * <br/>
	 * {@code FiscalYear fYear = (FiscalYear)service.getRecordById(FiscalYear.class, new Long(1));}<p>
	 * {@code TransactionType transType = (TransactionType)service.getRecordById(TransactionType.class, new Long(1));}<p>
	 * {@code TraineeType tType = (TraineeType)service.getRecordById(TraineeType.class, new Long(1));}<p>
	 * <br/>
	 * {@code service.deleteRecord(fYear, aTrail);}<p>
	 * {@code service.deleteRecord(tType, aTrail);}<p>
	 * {@code service.deleteRecord(transType, aTrail);}<p>
	 * <br/>
	 * The method used to delete any entity. 
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param record This is of type {@link java.lang.Object}
	 * @param aTrail This is of type {@link com.sf.audittrail.AuditTrail}
	 * @return void
	 * @since $date
	 * 
	 * 
	 * 
	 */
	public void deleteRecord(java.lang.Object record)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			handleDeleteRecord(session, record);
			tx.commit();			
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            //throw new EJBException("SwpServiceBean.deleteRecord ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	/**
	 * <h1>getAllRecords</h1>
	 * <p>
	 * {@code  public java.util.Collection getAllRecords(java.lang.Class clazz)}
	/**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * {@code import com.sf.audittrail.AuditTrail;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code AuditTrail aTrail = new AuditTrail();}<p>
	 * {@code aTrail.setAction("CREATE");}<p>
	 * {@code aTrail.setEntityName("Blah Blah Blah");}<p>
	 * {@code aTrail.setIpAddress("127.0.0.1");}<p>
	 * {@code aTrail.setRecordId(null);}<p>
	 * {@code aTrail.setDescription("N/A");}<p>
	 * {@code aTrail.setTime(new java.sql.Timestamp((new java.util.Date()).getTime()));}<p>
	 * <br/>
	 * {@code java.util.Collection x = service.getAllRecords(FiscalYear.class);}<p>
	 * {@code System.out.println("x.size() = " + x.size());}<p>
	 * <br/>
	 * This method returns collection of the records, specified by the clazz parameter.
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param clazz This is of type {@link java.lang.Class}
	 * @return {@link java.util.Collection}
	 * @throws Exception 
	 * @see java.util.Collection 
	 * @since $date
	 * 
	 * 
	 * 
	 */
	public java.util.Collection getAllRecords(java.lang.Class clazz) throws Exception
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();		
			System.out.println(1);
			//tx = session.beginTransaction();
			System.out.println(2);
			java.util.Collection retCollection = handleGetAllRecords(session, clazz);
			System.out.println(3);
			//tx.commit();
			System.out.println(4);
			return retCollection;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
        			he.printStackTrace();
                }
        	}
            //throw new EJBException("SwpServiceBean.getAllRecords ", new Exception(th.toString(), th));
			throw new Exception("SwpServiceBean.getAllRecords " + th.toString(), th);
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	/**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * {@code import com.sf.audittrail.AuditTrail;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code AuditTrail aTrail = new AuditTrail();}<p>
	 * {@code aTrail.setAction("CREATE");}<p>
	 * {@code aTrail.setEntityName("Blah Blah Blah");}<p>
	 * {@code aTrail.setIpAddress("127.0.0.1");}<p>
	 * {@code aTrail.setRecordId(null);}<p>
	 * {@code aTrail.setDescription("N/A");}<p>
	 * {@code aTrail.setTime(new java.sql.Timestamp((new java.util.Date()).getTime()));}<p>
	 * <br/>
	 * {@code java.util.Collection x = service.getAllRecords(FiscalYear.class,1,Integer.MAX_VALUE);}<p>
	 * {@code System.out.println("x.size() = " + x.size());}<p>
	 * <br/>
	 * This method returns collection of the records, specified by the clazz parameter that is within the pageIndex and pageSize.
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param clazz This is of type {@link java.lang.Class}
	 * @param pageIndex This is of type {@link int}
	 * @param pageSize This is of type {@link int}
	 * @return {@link java.util.Collection}
	 * @see java.util.Collection 
	 * @since $date
	 * 
	 * 
	 * 
	 */
	public java.util.Collection getAllRecords(java.lang.Class clazz, int pageIndex, int pageSize) throws Exception
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			//tx = session.beginTransaction();
			java.util.Collection retCollection = handleGetAllRecords(session, clazz, pageIndex, pageSize);
			//tx.commit();
			return retCollection;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new Exception("SwpServiceBean.getAllRecords " + th.toString(), th);
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	/**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * {@code import com.sf.audittrail.AuditTrail;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code AuditTrail aTrail = new AuditTrail();}<p>
	 * {@code aTrail.setAction("CREATE");}<p>
	 * {@code aTrail.setEntityName("Blah Blah Blah");}<p>
	 * {@code aTrail.setIpAddress("127.0.0.1");}<p>
	 * {@code aTrail.setRecordId(null);}<p>
	 * {@code aTrail.setDescription("N/A");}<p>
	 * {@code aTrail.setTime(new java.sql.Timestamp((new java.util.Date()).getTime()));}<p>
	 * <br/>
	 * {@code FiscalYear fYear = (FiscalYear)service.getRecordById(FiscalYear.class, new Long(1));}<p>
	 * {@code TransactionType transType = (TransactionType)service.getRecordById(TransactionType.class, new Long(1));}<p>
	 * {@code TraineeType tType = (TraineeType)service.getRecordById(TraineeType.class, new Long(1));}<p>
	 * <br/>
	 * This method returns an object of the specified by clazz paramter using the supplied id.
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param clazz This is of type {@link java.lang.Class}
	 * @param recordId This is of type {@link java.lang.Long}
	 * @return {@link java.lang.Object}
	 * @see java.lang.Object 
	 * @since $date
	 * 
	 * 
	 * 
	 */
	public java.lang.Object getRecordById(java.lang.Class clazz, java.lang.Long recordId) throws Exception
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			//tx = session.beginTransaction();
			java.lang.Object retObject = handleGetRecordById(session, clazz, recordId);
			//tx.commit();
			return retObject;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new Exception("SwpServiceBean.getRecordById " + th.toString(), th);
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	

   // ---------------- create methods -------------------------
   
   // ---------------- Key Performance and flexibility Methods ------------- 
   
   /**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * {@code import com.sf.audittrail.AuditTrail;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code AuditTrail aTrail = new AuditTrail();}<p>
	 * {@code aTrail.setAction("CREATE");}<p>
	 * {@code aTrail.setEntityName("Blah Blah Blah");}<p>
	 * {@code aTrail.setIpAddress("127.0.0.1");}<p>
	 * {@code aTrail.setRecordId(null);}<p>
	 * {@code aTrail.setDescription("N/A");}<p>
	 * {@code aTrail.setTime(new java.sql.Timestamp((new java.util.Date()).getTime()));}<p>
	 * <br/>
	 * {@code hql = "select c from FiscalYear c where c.name = '2012'";}<p>
	 * //in unique result queries use the actual class name in the query as agianst<p>
	 * //FQDN package name;<p>
	 * //Reason: entities have been mapped and hibernate will attempt to use<p>
	 * //the mapped name as against the FQDN class name<p>
	 * {@code FiscalYear fisYear =(FiscalYear)naptinSevrice.getUniqueRecordByHQL(hql);}<p>
	 * {@code System.out.println("Generic impl of getting a unique object by hql parameter = " + fisYear.getName());}<p>
	 * <br/><br/>
	 * {@code hql = "select c.name from FiscalYear c where c.id = 1";}<p>
	 * {@code String fName =(String)naptinSevrice.getUniqueRecordByHQL(hql);}<p>
	 * {@code System.out.println("Generic impl of getting an attribute of a unique object by hql = " + fName);}<p>
	 * <br/><br/>
	 * {@code hql = "select count(c) from Transaction c";}<p>
	 * {@code Long count = (Long)naptinSevrice.getUniqueRecordByHQL(hql);}<p>
	 * <br/>
	 * {@code System.out.println("count = " + count);}<p>
	 * <br/>
	 * The method used to retrieve a unique result using the hibernate query passed to it. 
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param hql This is of type {@link java.lang.String}
	 * @return {@link java.lang.Object}
 * @throws Exception 
	 * @see java.lang.Object
	 * @since $date
	 * 
	 * 
	 * 
	 */
   public java.lang.Object getUniqueRecordByHQL(java.lang.String hql) throws Exception
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			//tx = session.beginTransaction();
			java.lang.Object newRecord = handleGetUniqueRecordByHQL(session, hql);
			//tx.commit();
			return newRecord;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new Exception("SwpServiceBean.getUniqueRecordByHQL " + th.toString(), th);
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
		
	/**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * {@code import com.sf.audittrail.AuditTrail;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code AuditTrail aTrail = new AuditTrail();}<p>
	 * {@code aTrail.setAction("CREATE");}<p>
	 * {@code aTrail.setEntityName("Blah Blah Blah");}<p>
	 * {@code aTrail.setIpAddress("127.0.0.1");}<p>
	 * {@code aTrail.setRecordId(null);}<p>
	 * {@code aTrail.setDescription("N/A");}<p>
	 * {@code aTrail.setTime(new java.sql.Timestamp((new java.util.Date()).getTime()));}<p>
	 * {@code hql = "select c from Transaction c where c.fiscalYear.id = 1 and c.transactionType.id =1";}<p>
	 * {@code java.util.Collection mcol = naptinSevrice.getAllRecordsByHQL(hql);}<p>
	 * <br/>
	 * {@code System.out.println("mcol.size = " + mcol.size());}<p>
	 * <br/>
	 * The method used to get a collection of objects using the hibernate query passes as an argument. 
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param hql This is of type {@link java.lang.String}
	 * @return {@link java.util.Collection}
	 * @throws Exception 
	 * @see java.util.Collection
	 * @since $date
	 * 
	 * 
	 * 
	 */
	public java.util.Collection getAllRecordsByHQL(java.lang.String hql) throws Exception
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			//tx = session.beginTransaction();
			java.util.Collection retCollection = handleGetAllRecordsByHQL(session, hql);
			//tx.commit();
			return retCollection;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new Exception("SwpServiceBean.getAllRecordsByHQL " + th.toString(), th);
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	/**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * {@code import com.sf.audittrail.AuditTrail;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code AuditTrail aTrail = new AuditTrail();}<p>
	 * {@code aTrail.setAction("CREATE");}<p>
	 * {@code aTrail.setEntityName("Blah Blah Blah");}<p>
	 * {@code aTrail.setIpAddress("127.0.0.1");}<p>
	 * {@code aTrail.setRecordId(null);}<p>
	 * {@code aTrail.setDescription("N/A");}<p>
	 * {@code aTrail.setTime(new java.sql.Timestamp((new java.util.Date()).getTime()));}<p>	 
	 * {@code hql = "select c from Transaction c where c.fiscalYear.id = 1 and c.transactionType.id =1";}<p>
	 * {@code retCol1 = naptinSevrice.getAllRecordsByHQL(hql, 1, 4);}<p>
	 * <br/>
	 * {@code System.out.println("Collection with Pagination-band using HQL as parameter; col = " + retCol1.size());}<p>
	 * <br/>
	 * The method used to get a paginated collection of all objects using the hibernate query passed as an argument. 
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param hql This is of type {@link java.lang.String}
	 * @param pageIndex This is of type {@link int}
	 * @param pageSize This is of type {@link int}
	 * @return {@link java.util.Collection}
	 * @throws Exception 
	 * @see java.util.Collection 
	 * @since $date
	 * 
	 * 
	 * 
	 */
	public java.util.Collection getAllRecordsByHQL(java.lang.String hql, int pageIndex, int pageSize) throws Exception
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			//tx = session.beginTransaction();
			java.util.Collection retCollection = handleGetAllRecordsByHQL(session, hql, pageIndex, pageSize);
			//tx.commit();
			return retCollection;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new Exception("SwpServiceBean.getAllRecordsByHQL " + th.toString(), th);
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	/**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * {@code import com.sf.audittrail.AuditTrail;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code AuditTrail aTrail = new AuditTrail();}<p>
	 * {@code aTrail.setAction("CREATE");}<p>
	 * {@code aTrail.setEntityName("Blah Blah Blah");}<p>
	 * {@code aTrail.setIpAddress("127.0.0.1");}<p>
	 * {@code aTrail.setRecordId(null);}<p>
	 * {@code aTrail.setDescription("N/A");}<p>
	 * {@code aTrail.setTime(new java.sql.Timestamp((new java.util.Date()).getTime()));}<p>	 
	 * <br/>
	 * {@code  retCol1 = naptinSevrice.getAllRecordsByParameterId(Transaction.class, FiscalYear.class, new Long(1), 1, Integer.MAX_VALUE);}<p>
	 * <br/>
	 * {@code System.out.println("Generic impl of typical Many to one; with pagination = " + retCol1.size());}<p>
	 * <br/>
	 * The method used to get a paginated collection of a result set based on a many-to-one relationship with another entity. 
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param manyClass This is of type {@link java.lang.Class}
	 * @param oneClass This is of type {@link java.lang.Class}
	 * @param parameterId This is of type {@link java.lang.Long}
	 * @param pageIndex This is of type {@link int}
	 * @param pageSize This is of type {@link int}
	 * @return {@link java.util.Collection}
	 * @throws Exception 
	 * @see java.util.Collection
	 * @since $date
	 * 
	 * 
	 * 
	 */
	public java.util.Collection getAllRecordsByParameterId(java.lang.Class manyClass, java.lang.Class oneClass, java.lang.Long parameterId, int pageIndex, int pageSize) throws Exception
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			//tx = session.beginTransaction();
			java.util.Collection retCollection = handleGetAllRecordsByParameterId(session, manyClass, oneClass, parameterId, pageIndex, pageSize);
			//tx.commit();
			return retCollection;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new Exception("SwpServiceBean.getAllRecordsByParameterId " + th.toString(), th);
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	/**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * {@code import com.sf.audittrail.AuditTrail;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code AuditTrail aTrail = new AuditTrail();}<p>
	 * {@code aTrail.setAction("CREATE");}<p>
	 * {@code aTrail.setEntityName("Blah Blah Blah");}<p>
	 * {@code aTrail.setIpAddress("127.0.0.1");}<p>
	 * {@code aTrail.setRecordId(null);}<p>
	 * {@code aTrail.setDescription("N/A");}<p>
	 * {@code aTrail.setTime(new java.sql.Timestamp((new java.util.Date()).getTime()));}<p>	 
	 * <br/>
	 * {@code  retCol1 = naptinSevrice.getAllRecordsByTwoParameterIds(Transaction.class, FiscalYear.class, TransactionType.class, new Long(1), new Long(1), "OR", 1, Integer.MAX_VALUE);}<p>
	 * <br/>
	 * {@code System.out.println("Generic impl of typical Many to one; with 2CMR, with with pagination = " + retCol1.size());}<p>
	 * <br/>
	 * The method used to get a paginated collection of a result set based on a many-to-one relationship between two entities.
	 * The argument {@code strOperator} is used to determine if its either an OR or an AND. 
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param manyClass This is of type {@link java.lang.Class}
	 * @param firstOneClass This is of type {@link java.lang.Class}
	 * @param secondOneClass This is of type {@link java.lang.Class}
	 * @param firstParameterId This is of type {@link java.lang.Long}
	 * @param secondParameterId This is of type {@link java.lang.Long}
	 * @param strOperator This is of type {@link java.lang.String} . It could either be OR or AND
	 * @param pageIndex This is of type {@link int}
	 * @param pageSize This is of type {@link int}
	 * @return {@link java.util.Collection}
	 * @throws Exception 
	 * @see java.util.Collection
	 * @since $date
	 * 
	 * 
	 * 
	 */
	public java.util.Collection getAllRecordsByTwoParameterIds(java.lang.Class manyClass, java.lang.Class firstOneClass, java.lang.Class secondOneClass, java.lang.Long firstParameterId, java.lang.Long secondParameterId, java.lang.String strOperator, int pageIndex, int pageSize) throws Exception
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			//tx = session.beginTransaction(); 
			java.util.Collection retCollection = handleGetAllRecordsByTwoParameterIds(session, manyClass, firstOneClass, secondOneClass, firstParameterId, secondParameterId, strOperator, pageIndex, pageSize);
			//tx.commit();
			return retCollection;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new Exception("SwpServiceBean.getAllRecordsByTwoParameterIds " + th.toString(), th);
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	/**
	 * <p>
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code FiscalYear fYear = new FiscalYear();}<p>
	 * {@code fYear.setName("2014");}<p>
	 * <br/>
	 * {@code TraineeType traineeType = new TraineeType();}<p>
	 * {@code traineeType.setName("PROFESSIONAL");}<p>
	 * <br/>
	 * {@code TransactionType transactionType = new TransactionType();}<p>
	 * {@code transactionType.setName("DEBIT");}<p>
	 * <br/>
	 * {@code service.createNewRecord(fYear);}<p>
	 * {@code service.createNewRecord(traineeType);}<p>
	 * {@code service.createNewRecord(transactionType);}<p>
	 * <br/>
	 * This method creates a new Record. Irrespective of the Entity's Class. 
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param record This is of type {@link java.lang.Object}
	 * @return {@link java.lang.Object}
	 * @see java.lang.Object
	 * @since $date
	 * 
	 * 
	 * 
	 */
	 /*public java.lang.Object createNewRecord(java.lang.Object record)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			java.lang.Object newRecord = handleCreateNewRecord(session, record);
			tx.commit();
			return newRecord;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("SwpServiceBean.createNewRecord ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }*/
	
	/**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	  * {@code FiscalYear fYear = (FiscalYear)service.getRecordById(FiscalYear.class, new Long(1));}<p>
	 * {@code TransactionType transType = (TransactionType)service.getRecordById(TransactionType.class, new Long(1));}<p>
	 * {@code TraineeType tType = (TraineeType)service.getRecordById(TraineeType.class, new Long(1));}<p>
	 * <br/>
	 * {@code fYear.setName("2014");}<p>
	 * <br/>
	 * {@code tType.setName("PROFESSIONAL");}<p>
	 * <br/>
	 * {@code transType.setName("DEBIT");}<p>
	 * <br/>
	 * {@code service.updateRecord(fYear);}<p>
	 * {@code service.updateRecord(tType);}<p>
	 * {@code service.updateRecord(transType);}<p>
	 * <br/>
	 * This method updates an existing Record. Irrespective of the Entity's Class.
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param record This is of type {@link java.lang.Object}
	 * @return void
	 * @since $date
	 * 
	 * 
	 * 
	 */
	/*public void updateRecord(java.lang.Object record)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			handleUpdateRecord(session, record);
			tx.commit();			
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("SwpServiceBean.updateRecord ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }*/
	
	/**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code FiscalYear fYear = (FiscalYear)service.getRecordById(FiscalYear.class, new Long(1));}<p>
	 * {@code TransactionType transType = (TransactionType)service.getRecordById(TransactionType.class, new Long(1));}<p>
	 * {@code TraineeType tType = (TraineeType)service.getRecordById(TraineeType.class, new Long(1));}<p>
	 * <br/>
	 * {@code service.deleteRecord(fYear);}<p>
	 * {@code service.deleteRecord(tType);}<p>
	 * {@code service.deleteRecord(transType);}<p>
	 * <br/>
	 * The method used to delete any entity. 
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param record This is of type {@link java.lang.Object}
	 * @return void
	 * @since $date
	 * 
	 * 
	 * 
	 */
	/*public void deleteRecord(java.lang.Object record)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			handleDeleteRecord(session, record);
			tx.commit();			
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("SwpServiceBean.deleteRecord ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }*/
	
	/**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code FiscalYearCriteria fYearCriteria = (FiscalYearCriteria)service.getCriteriaObject(fYear.class);}<p>
	 * {@code TransactionTypeCriteria transTypeCriteria = (TransactionTypeCriteria)service.getCriteriaObject(tType.class);}<p>
	 * {@code TraineeTypeCriteria tTypeCriteria = (TraineeTypeCriteria)service.getCriteriaObject(transType.class);}<p>
	 * <br/>
	 * The method used to get the criteria of the object passed (Auxilliary method to get a Criteria Object).
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param clazz This is of type {@link java.lang.Class}
	 * @return org.hibernate.Criteria
	 * @since $date
	 * 
	 * 
	 * 
	 */
	public org.hibernate.Criteria getCriteriaObject(java.lang.Class clazz)
    {
        Session session = null;
		org.hibernate.Criteria retCriteria = null;
        
		try{			
			session = getSession();			
			retCriteria = handleGetCriteriaObject(session, clazz);
			
			
		}catch (javax.naming.NamingException nex){
            nex.printStackTrace();
        }
		return 	retCriteria;
        
    }
	
	/**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code FiscalYearCriteria fYearCriteria = (FiscalYearCriteria)service.getCriteriaObject(fYear.class);}<p>
	 * {@code TransactionTypeCriteria transTypeCriteria = (TransactionTypeCriteria)service.getCriteriaObject(tType.class);}<p>
	 * {@code TraineeTypeCriteria tTypeCriteria = (TraineeTypeCriteria)service.getCriteriaObject(transType.class);}<p>
	 * <br/>
	 * {@code FiscalYear fYear = (FiscalYear)service.getUniqueRecordByCriteria(fYearCriteria);}<p>
	 * {@code TransactionType transType = (TransactionType)service.getUniqueRecordByCriteria(transTypeCriteria);}<p>
	 * {@code TraineeType tType = (TraineeType)service.getUniqueRecordByCriteria(tTypeCriteria);}<p>
	 * <br/>
	 * This method returns a value object; accepts a criteria object as a parameter. 
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param clazz This is of type {@link java.lang.Class}
	 * @return java.lang.Object
	 * @throws Exception 
	 * @since $date
	 * 
	 * 
	 * 
	 */
	public java.lang.Object getUniqueRecordByCriteria(org.hibernate.Criteria criteria) throws Exception
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			//tx = session.beginTransaction();
			java.lang.Object newRecord = handleGetUniqueRecordByCriteria(session, criteria);
			//tx.commit();
			return newRecord;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new Exception("SwpServiceBean.getUniqueRecordByCriteria " + th.toString(), th);
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	/**
	 * Sample Implementation:<p>
	 * {@code import smartpay.enitity.fiscalyear.FiscalYear;}<p>
	 * {@code import smartpay.enitity.trainee.Trainee;}<p>
	 * {@code import smartpay.enitity.traineetype.TraineeType;}<p>
	 * {@code import smartpay.enitity.transaction.Transaction;}<p>
	 * {@code import smartpay.enitity.transactiontype.TransactionType;}<p>
	 * <br/>
	 * {@code import smartpay.ServiceLocator;}<p>
	 * {@code import smartpay.service.SwpService;}<p>
	 * <br/>
	 * <br/>
	 * <br/>
	 * {@code ServiceLocator serviceLocator = ServiceLocator.getInstance();}<p>
	 * {@code SwpService service = serviceLocator.getSwpService();}<p>
	 * <br/>
	 * {@code FiscalYearCriteria fYearCriteria = (FiscalYearCriteria)service.getCriteriaObject(fYear.class);}<p>
	 * <br/>
	 * {@code Collection fYearCollection = (FiscalYear)service.getAllRecordsByCriteria(fYearCriteria);}<p>
	 * <br/>
	 * The method used to get a collection of results based on the criteria specified. 
	 * 
	 * @author Onwuzu Onyekachi
	 * 
	 * @param clazz This is of type {@link java.lang.Class}
	 * @return java.util.Collection
	 * @throws Exception 
	 * @since $date
	 * 
	 * 
	 * 
	 */
	public java.util.Collection getAllRecordsByCriteria(org.hibernate.Criteria criteria) throws Exception
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			//tx = session.beginTransaction();
			java.util.Collection retCollection = handleGetAllRecordsByCriteria(session, criteria);
			//tx.commit();
			return retCollection;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new Exception("SwpServiceBean.getAllRecordsByCriteria " +  th.toString(), th);
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
  
/*
*/
   // ---------------- Hibernate helpers -------------------------

    /*
	*/
	/**Added by Chimezie. Use this to get the session from the hibernate utility class*/
	private Session getSession() throws HibernateException, NamingException
    {		
        return HibernateUtils.getSessionFactory().openSession();
    }
	
    // ---------------- accessor methods for (session!) bean references ---------------
	
	public org.hibernate.Transaction getStartTransaction() throws HibernateException, NamingException
	{
		Session session = getSession();
		return session.beginTransaction();
	}
	
	public void getCommitTransaction(org.hibernate.Transaction tx)
	{
		tx.commit();
	}
	
	public void getRollBackTransaction(org.hibernate.Transaction tx)
	{
		tx.rollback();
	}

	public java.util.List getQueryBySQLResults(java.lang.String sql) throws Exception
	{
		Session session = null;
        try{			
			session = getSession();			
			List list = handleGetQueryBySQLResults(session, sql);
			return list;
       }
        catch (Throwable th)
        {
			throw new Exception("SwpServiceBean.getQueryBySQLResults " + th.toString(), th);
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
	}
	


	public java.util.List getQueryBySQLResultsWithKeys(java.lang.String sql) throws Exception
	{
		Session session = null;
        try{			
			session = getSession();			
			List list = handleGetQueryBySQLResultsWithKeys(session, sql);
			return list;
       }
        catch (Throwable th)
        {
			throw new Exception("SwpServiceBean.getQueryBySQLResults " + th.toString(), th);
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
	}
	
	



	public int insertIntoDb(java.lang.String sql) throws Exception
	{
		Session session = null;
        try{			
			session = getSession();			
			int result = handleInsertIntoDb(session, sql);
			return result;
       }
        catch (Throwable th)
        {
			throw new Exception("SwpServiceBean.insertIntoDb " + th.toString(), th);
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
	}
	
}